services:

  backend:
    build: ./backend
    restart: unless-stopped
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: prod

      OPENAI_API_KEY: sk-proj-XXXXXXXXXXXXXXXXXXXX
      PROXY_URL: http://user:password@host:port

      REDIS_HOST: redis
      REDIS_PORT: 6379

      AWS_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: prodkeyid
      AWS_SECRET_ACCESS_KEY: prodaccesskey
      AWS_IMAGES_BUCKET: images

      API_URL: http://localhost:8080
    ports:
      - "8080:80"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://backend/system/ping || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  bot:
    build: ./bot
    restart: unless-stopped
    environment:
      BOT_TOKEN: 8055176561:AAEbH5I0RdjG1AP7Ro96yngBChDjl7dim9A
      API_URL: http://backend:80
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - backend
      - redis

  db:
    image: postgres:alpine
    command: -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: prod
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    restart: unless-stopped

  redis:
    image: redis:alpine
    expose:
      - 6379
    restart: unless-stopped
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    expose:
      - 9000
    environment:
      MINIO_ROOT_USER: prodkeyid
      MINIO_ROOT_PASSWORD: prodaccesskey
    command: server /data
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    expose:
      - 9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - backend

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: prod
      GF_SECURITY_ADMIN_PASSWORD: prod
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - db
    restart: unless-stopped

volumes:
  pgdata:
  minio_data:
  grafana_data:
  redis_data:
